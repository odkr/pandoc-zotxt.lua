#!/bin/sh
# can-response - Can an HTTP GET respose for testing.
# See -h for details.
# Copyright 2021 Odin Kroeger
# Released under the MIT license.
# shellcheck disable=2015

set -Ceu


# CONSTANTS
# =========

# The top-level directory of the git repository.
REPO="$(git rev-parse --show-toplevel)" && [ "$REPO" ] || {
	SCPT_NAME="$(basename "$0")" && [ "$SCPT_NAME" ] || SCPT_NAME="$0"
	printf '%s: failed to find repository.\n' "$SCPT_NAME" >&2
	exit 69
}
readonly REPO


# LIBRARY
# =======

LIBRARY="$REPO/scripts/library.sh"
# shellcheck source=../../scripts/library.sh
. "$LIBRARY" || exit


# CONSTANTS
# =========

# Where to put cans.
readonly CAN_DIR="$REPO/test/can"


# FUNCTIONS
# =========

update_can() (
	set +e
	url="${1:?}"
	endpoint="${url%%\?*}"
	data="${1#"$endpoint?"}"
	
	# shellcheck disable=2086
	params="$(IFS='&'; set -- $data; unset IFS
		  printf '"%s"\n' "$@" | jq --raw-output '@uri' |
	          sed 's/%3D/=/; s/%2B/+/g')"
	n=0
	encoded="$endpoint"
	for param in $params
	do
		n=$((n + 1))
		case $n in
			(1) encoded="$encoded?$param" ;;
			(*) encoded="$encoded&$param" ;;
		esac
	done
	
	can="$(printf %s "$url" | sha1sum | cut -b 1-8)" && [ "$can" ] ||
		panic '%s: failed to derive SHA-1' "$url"

	temp_can="$TEMP_DIR/$can" actual_can="$CAN_DIR/$can"

	warn 'fetching %s ...' "$encoded"
	curl -s -D - >"$temp_can" "$encoded" ||
		panic failed.

	mv "$temp_can" "$actual_can"

	warn 'stored as %s.' "$(path_prettify "$actual_can")"
)


# ARGUMENTS
# =========

OPTIND=1 OPTARG='' opt=''
while getopts h opt
do
	case $opt in
		(h)	exec cat <<-EOF
			$SCPT_NAME - Can an HTTP get response for testing.

			Synopsis:
			    $SCPT_NAME URL [URL [...]]
			    $SCPT_NAME -h

			Operands:
			    URL         URL to can.

			Options:
			    -h          Show this help screen.
			EOF
			;;
		(*)	exit 70
	esac
done
shift $((OPTIND - 1))
[ $# -gt 0 ] || panic -s 64 'no URL given.'


# PRELUDE
# =======

temp_dir_make -p cr


# MAIN
# ====

for URL
do
	update_can "$URL"
done
