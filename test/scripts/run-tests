#!/bin/sh
# run-tests - Does what it says on the tin.
# See -h for details.
# Copyright 2021 Odin Kroeger
# Released under the MIT license.
# shellcheck disable=2015,2086

set -Ceu


# CONSTANTS
# =========

# The top-level directory of the git repository.
REPO="$(git rev-parse --show-toplevel)" && [ "$REPO" ] || {
	SCPT_NAME="$(basename "$0")" && [ "$SCPT_NAME" ] || SCPT_NAME="$0"
	printf '%s: failed to find repository.\n' "$SCPT_NAME" >&2
	exit 69
}
readonly REPO


# LIBRARY
# =======

LIBRARY="$REPO/scripts/library.sh"
# shellcheck source=../../scripts/library.sh
. "$LIBRARY" || exit


# CONSTANTS
# =========

# Paths must be given relative to the top-level
# directory of the repository (`REPO`)!

# Where to look for other test scripts.
readonly SCPT_DIR="$REPO/test/scripts"

# Where to look for test data.
readonly DATA_DIR="$REPO/test/data"

# Where to look for norms.
readonly NORM_DIR="$REPO/test/norms"


# DEFAULTS
# ========

# Zotero API key.
API_KEY=MO2GHxbkLnWgCqPtpoewgwIl

# Pandoc executable.
PANDOC=pandoc


# ARGUMENTS
# =========

OPTIND=1 OPTARG='' opt=''
unset CONNECTORS FILTER PANDOC_ARGS PANDOC PANDOC_VERS
while getopts a:c:f:hA:P:V: opt
do
	case $opt in
		(a)	API_KEY="$OPTARG" ;;
		(c)	CONNECTORS="${CONNECTORS-} $OPTARG" ;;
		(f)	FILTER="$OPTARG" ;;
		(A)	PANDOC_ARGS="${PANDOC_ARGS-} $OPTARG" ;;
		(P)	PANDOC="$OPTARG" ;;
		(V)	PANDOC_VERS="$OPTARG" ;;
		(h)	exec cat <<-EOF
			$SCPT_NAME - Run tests.

			Synopsis:
			    $SCPT_NAME [<options>] TEST [TEST [...]]
			    $SCPT_NAME -h

			Operands:
			    TEST        test to run.

			Options:
			    -a KEY      Use KEY as Zotero API key
			                (default: $API_KEY).
			    -c CONN     Use CONN to connect to Zotero.
			                (default: zotero zoteroweb).
			    -f FILTER   Test FILTER
			                (default is a best guess).
			    -h          Show this help screen.
			    -A ARGS     Pass ARGS to Pandoc
			                (default: --quiet).
			    -P EXEC	Use EXEC as Pandoc executable
			                (default: pandoc).
			    -V VERSNUM  Assume Pandoc version VERSNUM.
			
			    -c, -A, and -F can be given multiple times.

			    Relative paths are interpreted as relative to
			    the top-level directory of the repository.
			EOF
			;;
		(*)	exit 70
	esac
done
shift $((OPTIND - 1))
[ $# -gt 0 ] || panic -s 64 'no tests given.'

: "${CONNECTORS:="zotxt zoteroweb"}"

: "${PANDOC_ARGS:=--quiet}"

[ "${PANDOC_VERS-}" ] || PANDOC_VERS="$(
	"$PANDOC" --from markdown --to html \
	          --lua-filter="$SCPT_DIR/print-vers.lua" /dev/null
)" && [ "$PANDOC_VERS" ] ||
	panic 'failed to determine Pandoc version, use -V.'

[ "${FILTER-}" ] || FILTER="$(guess_filter)" && [ "$FILTER" ] || exit


# PRELUDE
# =======

temp_dir_make -p rt
cd -P "$REPO" || exit 69


# MAIN
# ====

failures=0

for conn in $CONNECTORS
do
	for test
	do
		case $test in
			(/*) : ;;
			(*) test="$REPO/$test"
		esac
		test="${test#"$DATA_DIR/"}"
		test="${test%.md}"
		TMPDIR="$TEMP_DIR/$test"
		mkdir -p "$TMPDIR" || exit
		export TMPDIR

		warn 'running %s test with %s ...' "$BOLD${test}$SGR0" "$conn"

		dirname="$(dirname "$test")" && [ "$dirname" ] ||
			panic '%s: failed to determine directory name.' "$test"
		[ "$dirname" != . ] && mkdir -p "$TEMP_DIR/$dirname"
		output="$TEMP_DIR/$test.html"
		
		vers="$PANDOC_VERS"
		while true
		do
			norm="$NORM_DIR/$vers/${test}.html"
			[ -e "$norm" ] && break
			case $vers in
				(*.*) vers="${vers%.*}" ;;
				(*)   break ;;
			esac
		done

		if "$PANDOC" --from markdown --to html \
		             --lua-filter="$SCPT_DIR/use-citeproc.lua" \
		             /dev/null
		then
			"$PANDOC" $PANDOC_ARGS \
			          --from markdown --to html \
		                  --output="$output" \
		                  --metadata=zotero-connectors="$conn" \
		                  --metadata=zotero-api-key="$API_KEY" \
		                  --lua-filter="$FILTER" \
		                  --filter pandoc-citeproc \
		                  "$DATA_DIR/$test.md"
		else
			"$PANDOC" $PANDOC_ARGS \
		                  --from markdown --to html \
				  --output="$output" \
		                  --metadata=zotero-connectors="$conn" \
		                  --metadata=zotero-api-key="$API_KEY" \
		                  --lua-filter="$FILTER" \
		                  --citeproc \
		                  "$DATA_DIR/$test.md"
		fi
		if [ -e "$norm" ]
		then
			diff "$output" "$norm" || {
				warn -e "$RED" 'failed.'
				failures=$((failures + 1))
			}
		else
			warn -e "$RED" \
			     '%s is not defined for Pandoc v%s.' \
			     "$BOLD$test$SGR0$RED" "$vers"
			name="$(basename "$output")" && [ "$name" ] ||
				panic 'failed to get basename of %s.' "$output"
			target="${REPO%/}/$name"
			[ -e "$target" ] &&
				panic '%s exists, not overwriting.' \
				      "$(path_prettify "$target")"
			mv "$output" "$REPO"
			panic 'moved %s to %s.' \
			      "$name" "$(path_prettify "$REPO")"
		fi
	done
done

case $# in
	(1)	[ "$failures" -gt 0 ] && exit 69 ;;
	(*)	case $failures in
			(0) warn -e "$GREEN"  'all tests succeeded.' ;;
			(*) panic '%s tests failed.' "$failures" ;;
		esac
esac

exit 0