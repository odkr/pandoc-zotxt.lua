#!/bin/sh
# test-pandoc-versions - run the test suite for every Pandoc version.
# See -h for details.
# Copyright 2021 Odin Kroeger
# Released under the MIT license.
# shellcheck disable=2015

set -Ceu


# CONSTANTS
# =========

# The top-level directory of the git repository.
REPO="$(git rev-parse --show-toplevel)" && [ "$REPO" ] || {
	SCPT_NAME="$(basename "$0")" && [ "$SCPT_NAME" ] || SCPT_NAME="$0"
	printf '%s: failed to find repository.\n' "$SCPT_NAME" >&2
	exit 69
}
readonly REPO

# A Lua filter that prints Pandoc's version.
VERS_PRINT="$REPO/test/scripts/print-vers.lua"
readonly VERS_PRINT


# LIBRARY
# =======

LIBRARY="$REPO/scripts/library.sh"
# shellcheck source=../../scripts/library.sh
. "$LIBRARY" || exit


# PRELUDE
# =======

cd -P "$REPO" || exit 69


# MAIN
# ====

IFS=:
failures=0
for dir in $PATH
do
	unset IFS
	for pandoc in "$dir/pandoc" "$dir"/pandoc[0-9]*
	do
		[ "$pandoc" = "$dir/pandoc[0-9]*" ] && break
		[ -e "$pandoc" ] && [ -x "$pandoc" ] || continue
	
		version="$("$pandoc" -f markdown -t plain \
		                     -L "$VERS_PRINT" /dev/null)"

		warn -n 'testing with %s (v%s) ... %s%s' \
		     "$BOLD$(path_prettify "$pandoc")$SGR0" \
		     "$version" "$CVVIS"
		if make -e PANDOC="$pandoc" "$@" >/dev/null 2>&1
		then
			echo "${CNORM}${GREEN}pass${SGR0}" >&2
		else
			echo "${CNORM}${RED}fail${SGR0}" >&2
			failures=$((failures + 1))
		fi
	done
done

[ "$failures" -eq 0 ] && exit
exit 69
