#!/usr/bin/env python
# pylint: disable=C0111, C0103, C0413
#
# httpd - A simple HTTP server
#
#
# SYNOPSIS
# ========
#
#      httpd PORT
#
#
# DESCRIPTION
# ===========
#
# httpd serves files from test/data/http-server. This allows for the test
# suite to run even if Zotero and zotxt are not running. httpd only returns
# to the caller once the HTTP server accepts requests.
#
#
# FILES
# =====
#
#   test/data/http-server
#       Directory from which files are served.
#   test/run/http-server.pid
#       PID file.
#
# CAVEATS
# =======
#
# The Makefile tries to make sure that the server is shut down.
# It may fail at that though.
#
#
# SEE ALSO
# ========
#
# httpdctl
#
#
# AUTHOR
# ======
#
# Copyright 2019 Odin Kroeger
#
#
# LICENSE
# =======
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


# CONSTANTS
# =========

# How long may the server take to start up, before we give up.
MAX_STARTUP_TIME = 5

# How long may the server take to shut down, before we kill it.
MAX_SHUTDOWN_TIME = 5


# LIBRARIES
# =========

from argparse import ArgumentParser
from os import chdir, devnull, dup2, fork, getpid, kill, path, umask, setsid
from signal import signal, SIG_IGN, SIGINT, SIGCHLD, SIGKILL, SIGTERM
from sys import argv, exit, stdin, stdout, stderr
from time import sleep

import socket

try:
    import SimpleHTTPServer as server
except ModuleNotFoundError:
    import http.server as server

try:
    import SocketServer as socketserver
except ModuleNotFoundError:
    import socketserver


# INITIALISATION
# ==============

base_dir = path.realpath(path.join(path.split(argv[0])[0], '..'))
data_dir = path.join(base_dir, 'data', 'http-server')
pid_fname = path.join(base_dir, 'run', 'http-server.pid')

parser = ArgumentParser(description='Starts a simle HTTP server.')
parser.add_argument('port', type=int, metavar='PORT')
args = parser.parse_args()

socketserver.TCPServer.allow_reuse_address = True
handler = server.SimpleHTTPRequestHandler
httpd = socketserver.TCPServer(('localhost', args.port), handler)


# PARENT
# ======

pid = fork()

if pid > 0:
    # Don't wait for the child, lest it becomes a zombie.
    signal(SIGCHLD, SIG_IGN)

    # Try to reach the child, checking whether it accepts connections.
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for i in range(MAX_STARTUP_TIME):
        if i > 1:
            sleep(1)
        try:
            s.connect(('localhost', args.port))
        except socket.error:
            continue
        s.close()
        break
    else:
        # If we reach this point, MAX_STARTUP_TIME has passed,
        # but we couldn't connect to the child, so we kill it.
        for i in range(MAX_SHUTDOWN_TIME):
            if i > 1:
                sleep(i)
            try:
                kill(pid, SIGTERM)
            except OSError as err:
                if err.errno == 3:
                    break
        else:
            try:
                kill(pid, SIGKILL)
            except OSError:
                pass
        exit(1)
    exit()


# CHILD
# =====

# Deamonise!
chdir(data_dir)
setsid()
umask(0o077)
for stream, mode in ((stdin, 'r'), (stdout, 'a+'), (stderr, 'a+')):
    stream.flush()
    fd = open(devnull, mode)
    dup2(fd.fileno(), stream.fileno())

# Write the PID file.
with open(pid_fname, 'w') as pid_file:
    pid_file.write('{!s}\n'.format(getpid()))

# Shutdown if we receive an INT or a TERM.
for sig in (SIGTERM, SIGINT):
    signal(sig, httpd.shutdown)

httpd.serve_forever(0.1)
httpd.server_close()
